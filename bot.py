import os
import json
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from chart import generate_chart
from strategy import check_strategy
from data_fetcher import fetch_ohlcv, calculate_ema

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ALLOWED_CHAT_ID = int(os.getenv("ALLOWED_CHAT_ID"))

TRACKED_FILE = "tracked_symbols.json"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_tracked():
    if not os.path.exists(TRACKED_FILE):
        with open(TRACKED_FILE, "w") as f:
            json.dump([], f)
    with open(TRACKED_FILE, "r") as f:
        return json.load(f)

def save_tracked(symbols):
    with open(TRACKED_FILE, "w") as f:
        json.dump(symbols, f)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_CHAT_ID:
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ 2+1. –ò—Å–ø–æ–ª—å–∑—É–π /add, /list –∏ /chart.")

async def add_symbol(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_CHAT_ID:
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add MOVE/USDT)")
        return
    symbol = context.args[0].upper()
    symbols = load_tracked()
    if symbol in symbols:
        await update.message.reply_text(f"{symbol} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
        return
    symbols.append(symbol)
    save_tracked(symbols)
    await update.message.reply_text(f"{symbol} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")

async def list_symbols(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_CHAT_ID:
        return
    symbols = load_tracked()
    if not symbols:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –ø—É—Å—Ç.")
    else:
        await update.message.reply_text("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã:\n" + "\n".join(symbols))

async def send_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_CHAT_ID:
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /chart SYMBOL")
        return
    symbol = context.args[0].upper()
    chart_path = generate_chart(symbol)
    if chart_path:
        with open(chart_path, "rb") as f:
            await update.message.reply_photo(photo=f)
    else:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol}.")

async def send_signal(chat_id, msg, app):
    await app.bot.send_message(chat_id=chat_id, text=msg)

async def job(app):
    symbols = load_tracked()
    for symbol in symbols:
        try:
            df = fetch_ohlcv(symbol, "1h", limit=200)
            df = calculate_ema(df, [7,14,28])
            if check_strategy(df):
                price = df['close'].iloc[-1]
                msg = f"üîî [LONG SIGNAL] ‚Äî {symbol}\n–¶–µ–Ω–∞: {price:.4f}\n‚úÖ –¶–µ–Ω–∞ –≤—ã—à–µ EMA 7/14/28\n‚úÖ Bullish Engulfing\n‚ûï –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã–¥–µ—Ä–∂–∞–ª–∞\nüìà –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤—Ö–æ–¥: {price:.4f}\n‚õî –°—Ç–æ–ø-–ª–æ—Å—Å: {(price*0.97):.4f}\nüéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {(price*1.07):.4f} / {(price*1.14):.4f}"
                await send_signal(ALLOWED_CHAT_ID, msg, app)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")

def setup_bot():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_symbol))
    app.add_handler(CommandHandler("list", list_symbols))
    app.add_handler(CommandHandler("chart", send_chart))
    return app
